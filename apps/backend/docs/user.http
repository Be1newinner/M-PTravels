@baseUrl = https://localhost:5001
@token = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3ZTRjYWNiNDNlM2YwZjYxNTljYzMwMSIsImlhdCI6MTc1MTAxMjI0MiwiZXhwIjoxNzUxMDk4NjQyfQ.UKvX3RRlufJ_ukhF-qkVNV66GRFVZ8N4fIVXirNEtQg
@REFRESH_TOKEN =eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3ZTRjYWNiNDNlM2YwZjYxNTljYzMwMSIsImVtYWlsIjoiYmUxbmV3aW5uZXJAZ21haWwuY29tIiwiaWF0IjoxNzUxMDEyMjQyLCJleHAiOjE3NTM2MDQyNDJ9.f_iSyulpblFL7rSQ8jsEXXCLQJk7PP4ntBvnswPgMpA
@resetToken = YOUR_PASSWORD_RESET_TOKEN_HERE # Get this from the forgot-password email link
@EMAIL=be1newinner@gmail.com
@PASSWORD=vijay123

### -------------------------
### User Management Endpoints
### -------------------------

### Create a new user
# @name createUser
POST {{baseUrl}}/users/create
Content-Type: application/json

{
  "name": "Test User",
  "email": "{{EMAIL}}",
  "password": "{{PASSWORD}}"
}

### Login a user
# @name loginUser
POST {{baseUrl}}/users/login
Content-Type: application/json

{
  "email": "{{EMAIL}}",
  "password": "{{PASSWORD}}"
}

### Refresh access token
# This request uses the refreshToken stored in cookies by the loginUser request.
# Alternatively, you can send it in the body if your client doesn't handle cookies automatically.
# @name refreshToken
POST {{baseUrl}}/users/refresh-token
Content-Type: application/json
Cookie: refreshToken={{REFRESH_TOKEN}}

### Forgot password - Send password reset email
# @name forgotPassword
POST {{baseUrl}}/users/forgot-password
Content-Type: application/json

{
  "email": "testuser@example.com"
}

### Reset user password
# Replace {{resetToken}} with the token received in the password reset email.
# @name resetPassword
POST {{baseUrl}}/users/reset-password?token={{resetToken}}
Content-Type: application/json

{
  "password": "newSecurePassword456"
}


### -------------------------
### Protected User Endpoints (Require JWT Token)
### -------------------------

### Get logged-in user details
# Requires a valid JWT token in the Authorization header.
# @name getUserDetails
GET {{baseUrl}}/users/me
Authorization: Bearer {{token}}
Accept: application/json

### Logout the user
# Requires a valid JWT token in the Authorization header.
# @name logoutUser
POST {{baseUrl}}/users/logout
Authorization: Bearer {{token}}
Accept: application/json

### Change the current password
# Requires a valid JWT token in the Authorization header.
# @name changePassword
POST {{baseUrl}}/users/change-password
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "oldPassword": "password123",
  "newPassword": "newSecurePassword123"
}


### ----------------------------------------------------------------
### Important for using this file with VS Code REST Client:
### ----------------------------------------------------------------